
1)--COMMENT--

/* This is the first way to write a comment */
// This is another way to write a comment which is my favorite.
_______________________________________

2)--Declare--

*JavaScript provides seven different data types which are 
undefined, null, boolean, string, symbol, number, and object.
*We tell JavaScript to create or declare a variable by
 putting the keyword var in front of it:
Var somthing; 

*Undefined : is an initial value indicates that the variables is declared.

*BE AWARE OF In JavaScript capitalization matters : MYVAR is not the same as MyVar nor myvar.
_______________________________________

3)--assignment operator--

TO store a value in a variable, 
we use something called assignment operator:

Ex: Variable = 7;
_______________________________________

4)--camelCase--

camelCase: is a Javascript's writing method, which is used with 
multi-word variable names, and it states the use of the first word
in lowercase and the first letter of each subsequent word is capitalized.

Ex: myVar = 3;
_______________________________________

5)--Calculation-- 

*JavaScript uses the + symbol as addition operation when placed between
two numbers.
Ex: myVar = 5 + 10; // assigned 15

*JavaScript uses the - symbol for subtraction.
Ex: myVar = 12 - 6; // assigned 6

*JavaScript uses the * symbol for multiplication of two numbers.
Ex: myVar = 3 * 3; // assigned 9

*JavaScript uses the / symbol for division.
Ex: myVar = 16 / 2; // assigned 8
__________________________________________

6)--Increment & Decrement a number--

6-1) Increment by the operator (x++ or ++x) :

The increment operator increments (adds one to) its operand and returns a value.

*If used postfix, with operator after operand (for example, x++),
 then it returns the value before incrementing.
 Ex: // Postfix: 
     var x = 3;
     y = x++; // y = 3, x = 4

*If used prefix with operator before operand (for example, ++x),
 then it returns the value after incrementing.
Ex: // Prefix:
    var a = 2;
    b = ++a; // a = 3, b = 3

6-2) Decrement by the operator (x-- or --x) :

The decrement operator decrements (subtracts one from) its operand and returns a value.

*If used postfix (for example, x--), then it returns the value before decrementing.
Ex: // Postfix 
    var x = 3;
    y = x--; // y = 3, x = 2

*If used prefix (for example, --x), then it returns the value after decrementing.
Ex: // Prefix
    var a = 2;
    b = --a; // a = 1, b = 1
_________________________________________

7)--Decimal numbers or Floats--

*Decimal numbers are sometimes referred to as floating point numbers or floats.
 Ex: var myDecimal = 5.7;

7-1) Multiply Two Decimals:
    Ex: var x = 2.0 * 2.5; // assigned 5.0

7-2) Divide on a decimal:
    Ex: var y = 4.4 / 2.0; assigned 2.2
________________________________________

8)--The remainder operator--

*The remainder operator % gives the remainder of the division of two numbers.
 Ex 1: 10 / 3 = 3 , the remainder here is 1.
 BUT we write it in javascript like this:
       var remainder = 1 % 10

 Ex 2: 11 / 3 = 3 , the remainder here is 2.
 BUT we write it in javascript like this: 
       var remainder = 2 % 11
_________________________________________

9)--The ( += , -= , *= , /= ) operators--

*they are operators which do both a mathematical operation,
 and assignment in one step.
 
 Ex 1: if we have (myVar = myVar + 5;)
 it can be written by using the (+= operator) to become :
 myVar += 5;

 Ex 2: myVar = myVar - 5;
       myVar -= 5;

 Ex 3: myVar = myVar * 5;
       myVar *= 5;

 Ex 4: myVar = myVar / 5;
       myVar /= 5;
_________________________________________

10)--Convert Celsius to Fahrenheit--

*The algorithm to convert from Celsius to Fahrenheit
 is the temperature in Celsius times 9/5, plus 32.

Ex: var fahrenheit = (celsius * 9/5) + 32; 
_________________________________________

11)--Declare String Variables--

*string literal: it is a series of zero or more characters
 enclosed in single or double quotes.
 
 Ex: var myName = "Sobhi";
_________________________________________

12)--Escaping Literal Quotes in Strings--

*To escape a quote from considering it as an end of string quote,
 we place a backslash (\) in front of the quote.

Ex: var sampleStr = "This is a string, \"and this will be displayed between quotes\".";
    after printing this to the console, you would get:
    This is a string,"and this will be displayed between quotes".

*to escape using backslash we can use a single quote instead of a double quote.

Ex: 'This string has "double quotes" in it. And "probably" lots of them.'
_________________________________________

13)--Escape Sequences in Strings--

Quotes are not the only characters that can be escaped inside a string.
 Here is a table of common escape sequences:

Code	Output
\'	single quote
\"	double quote
\\	backslash
\n	newline
\r	carriage return
\t	tab
\b	backspace
\f	form feed

Ex: var myStr = "FirstLine\n\\SecondLine\\\rThirdLine";
*Note that the backslash itself must be escaped
 in order to display as a backslash like in here: \\SecondLine\\
__________________________________________

14)--Concatenating Strings--

14-1) With Plus Operator:

In JavaScript, when the + operator is used with a String value,
 it is called the concatenation operator.
 You can build a new string out of other strings by concatenating them together.

Ex: var myStr = "I come first. " + "I come second.";

14-2) With the Plus Equals Operator:

We can also use the += operator to concatenate a string
 onto the end of an existing string variable. 

Ex: var myStr= "This is the first sentence. ";
       myStr +="This is the second sentence.";

* Concatenation does not add spaces between concatenated strings,
 so you'll need to add them yourself.
*By using the concatenation operator (+),
 you can insert one or more variables into a string you're building.

Ex: var myName= "Sobhi";
    var myStr= "My name is " + myName +  " and I like Javascript!";
the result: My name is Sobhi and I like Javascript!
____________________________________________

15)--Appending Variables to Strings--

*We can append variables to a string using the plus equals (+=) operator.

Ex: var x = "the string we want to append";
    var y = "the string that we want to append another string to it ";
        y += x;
______________________________________________

16)--Find the Length of a String--

*You can find the length of a String value by writing .length 
after the string variable or string literal.

Ex: var myStr = "Test String";
    myStr.length; // 11
Or:
    "Test String".length; // 11
______________________________________________

17)--BRACKETS NOTATION--

* Most modern programming languages, like JavaScript,
  don't start counting at 1 like humans do. They start at 0.
  This is referred to as Zero-based indexing.
  Thus in this case we use somthing called "Bracket notation"
  which is a way to get a character at a specific index within a string.

Ex: > var firstName = "Sobhi"
      undefined
    > firstName[0]
      'S'   
* You can also use bracket notation to get the character
  at other positions within a string.

Ex: > var myStr = "Love";
      undefined
    > var mynewStr = myStr[2];
      undefined
    >  myStr
     'Love'
    >  mynewStr
      'v'
* If var firstName = "Sobhi", you can get the value of the last letter 
  of the string by using firstName[firstName.length - 1].

Ex: > var myStr = "Love"
    undefined
    > var lastLetterOfmyStr = myStr[myStr.length - 1];
    undefined
    > lastLetterOfmyStr
     'e'
* you can get the value of the third-to-last letter of 
  the var firstName = "Sobhi" string by using firstName[firstName.length - 3],
  and so on .

Ex: >  var firstName = "Sobhi";
       undefined
    >  var thirdToLastLetterOfFirstName = firstName[firstName.length - 3];
       undefined
    > thirdToLastLetterOfFirstName
       'b'

______________________________________________

18)--ARRAYS--

*With JavaScript array variables, we can store several pieces of data in one place.
Ex: var myArray = ["John", 23];

* You can also nest arrays within other arrays.
 This is also called a Multi-dimensional Array.
Ex: var myArray = [["Bulls", 23], ["White Sox", 45]]

*We can access the data inside arrays using indexes.
Ex: var array = [1,2,3];
    array[0]; // equals 1
    var data = array[1];  // equals 2

*Unlike strings, the entries of arrays are mutable and can be changed freely.
Ex: var ourArray = [3,2,1];
    ourArray[0] = 1; // equals [1,2,1]

*multi-dimensional array, is as an array of arrays.
Ex: var arr = [
    [1,2,3],
    [4,5,6],
    [7,8,9],
    [[10,11,12], 13, 14]
];
    arr[3]; // equals [[10,11,12], 13, 14]
    arr[3][0]; // equals [10,11,12]
    arr[3][0][1]; // equals 11

*Manipulate Arrays With push: is an easy way to append data to 
the end of an array via the push() function.
Ex: var arr = [1,2,3];
    arr.push(4);
    // arr is now [1,2,3,4]

*Manipulate Arrays With pop: another way to change the last 
 element of an array with the .pop() function.
Ex: var oneDown = [1, 4, 6].pop();
    // oneDown is [1 , 4]

*Manipulate Arrays With shift: is a way to change the first element 
  of an array with the .shift() function.
Ex: var myArray = [["John", 23], ["dog", 3]].shift();
    // myArray is ["dog", 3]

*Manipulate Arrays With unshift: .unshift() works exactly like .push(),
 but instead of adding the element at the end of the array,
 unshift() adds the element at the beginning of the array.
Ex:  var myArray =  ["dog", 3]
     myArray.unshift(5)
     //  myArray is [5, "dog", 3]
__________________________________________________

19)--FUNCTIONS & SCOPES--

19-1) *FUNCTION: are the reusable parts in JavaScript.
      Functions are very important in JavaScript,
      to the extent that some people call JavaScript a "function-oriented" language.

Ex: function reusableFunction(){
    console.log("Hi World");
} 
    reusableFunction();

* Let's try to understand how the FUNCTION works from a mathematical perspective,
  so remember the function f(x), and give it a virtual value which equals (x + 1),
  then get down with me to do some simple math:

  F(x) = x + 1 ,
  let's consider x = 1,
  F(1) = 1 + 1  =>  F(1) = 2 .

* the Conclusion is : the function F(x) will have the value (2),
  when we consider the value (1) of the variable (x) .

* Similarly we can apply what we have done on the next example :

Ex: function f(x) {
    return x + 1;
}
    for x = 1
    console.log(f(1));  // f(1) = 2

* Another example :

Ex: function ourFunctionWithArgs(a, b) {
    console.log(a - b);
}
    ourFunctionWithArgs(10, 5); // Outputs 5
    Where (a,b) are PARAMETERS, and (10,5) are ARGUMENTS.
_______________________________

19-2)*In JavaScript, you can call functions on something.
 By this, we mean that you use the dot to call the function. 
 For instance, when we say "call method trim on string s", we mean:

Ex: let s = " this is a string  ";
    s.trim(); // => "this is a string"

Ex2: Math.round(4.5);
     console.log("hello");
     Array.from([1, 2, 3]);
_______________________________

19-3) *SCOPES: In JavaScript, scope refers to the visibility of variables.

*Global scope: it is a variable which is declared outside a function,
 and they can be seen everywhere in your JavaScript code.
*Variables which are used without the var keyword are
 automatically created in the global scope. 

Ex: var globalScope1 = 5;
   
    function myTest() {
    
    globalScope2 = "3";
    
}

    myTest(); // => both globalScope 1 and 2 are GLOBAL SCOPES.
   

*Local scope: it is a variable which is declared within a function,
 and it works only within the function.

Ex: function myTest() {
    var localScope = "3";
    console.log(localScope);
}
   myTest(); // => 3
   console.log(localScope); // => "undefined"

*Global and local scopes in one function: 
 It is possible to have both local and global variables with the same name.
 When you do this, the local variable takes precedence over the global variable.

Ex: var scope = "i'm a global scope";

    function testScope() {
 
              var scope = "i'm a local scope";
  
              return scope;
}

    testScope();  // => "i'm a local scope"

_______________________________________________

20)--BOOLEANS & (IF) STATMENTS & COMPARISON OPERATORS--

*BOOLEANS: are another data type, and they may only be one of two values:
 true or false. Boolean values are never written with quotes.

Ex: function welcomeToBooleans() {

    return true;
}
______________________________

*(IF) STATMENTS: are used to make decisions in code.
 The keyword (if) tells JavaScript to execute the code
 in the curly braces under certain conditions,
 defined in the parentheses.These conditions are known
 as (Boolean) conditions because they may only be (true or false).

Ex: function test (wasThatTrue) {
    if (wasThatTrue) {
      return "It was true";
  }
      return "It was false";
}

    test(true);  // returns "It was true"
    test(false); // returns "It was false"
______________________________

* Comparison Operators: they are operators which return a boolean true or false value.
*The most basic operator is the (equality operator ==),
 which  compares two values and returns true if they're equivalent or false if they are not.
* NOTE that equality is different from assignment (=),
 which assigns the value at the right of the operator to a variable in the left.

Ex: function equalityTest(myVal) {
     if (myVal == 10) {
     return "Equal";
  }
     return "Not Equal";
}

*NOTE In order for JavaScript to compare two different data types
 (for example, numbers and strings), it must convert one type to another.
 Once it does, however, it can compare terms as follows:

   1   ==  1    // true
   1   ==  2    // false
   1   == '1'   // true
  "3"  ==  3    // true

*Strict equality (===) is the counterpart to the equality operator (==).
 Unlike the equality operator,strict equality tests both the data type
 and value of the compared elements.

  3 === 3   // true
  3 === '3' // false

Ex: function strictEqualityTest(myVal) {
     if (myVal === 7) {
     return "Equal";
  }
     return "Not Equal";
}

*The inequality operator (!=) is the opposite of the equality operator. 
 It means "Not Equal" and returns false where equality would return true.
 Like the equality operator, the inequality operator will
 convert data types of values while comparing.

  1 != 2      // true
  1 != "1"    // false
  1 != '1'    // false
  1 != true   // false
  0 != false  // false

Ex: function testNotEqual(val) {
    if (val != 3) {
    return "Not Equal";
  }
    return "Equal";
}

testNotEqual(3);

*The strict inequality operator (!==) is the opposite of the strict equality operator.
 It means "Strictly Not Equal" and returns false where strict equality would return true.
 Strict inequality will not convert data types.

  3 !== 3   // false
  3 !== '3' // true
  4 !== 3   // true

Ex: function testStrictNotEqual(val) {
   
    if (val !== 17) {

    return "Not Equal";
  }
    return "Equal";
}

*The greater than operator (>) compares the values of two numbers.
 If the number to the left is greater than the number to the right,
 it returns true. Otherwise, it returns false.

Like the equality operator, greater than operator will convert data types
of values while comparing:

  5 > 3   // true
  7 > '3' // true
  2 > 3   // false
 '1' > 9  // false

Ex: function testGreaterThan(val) {

    if (val > 100) {  
    return "Over 100";
  }
  
    if (val > 10) { 
    return "Over 10";
  }

    return "10 or Under";
}

*The greater than or equal to operator (>=) compares the values of two numbers.
 If the number to the left is greater than or equal to the number to the right,
 it returns true. Otherwise, it returns false.

Like the equality operator, greater than or equal to operator will
 convert data types while comparing. 

  6  >=  6  // true
  7  >= '3' // true
  2  >=  3  // false
 '7' >=  9  // false

Ex: function testGreaterOrEqual(val) {
    
    if (val >= 20) {  
    return "20 or Over";
  }
  
    if (val >= 10) {  
    return "10 or Over";
  }

  return "9 or Under";
}

*The less than operator (<) compares the values of two numbers.
 If the number to the left is less than the number to the right, 
 it returns true. Otherwise, it returns false.

Like the equality operator,less than operator converts data types while comparing.

  2 < 5  // true
 '3' < 7 // true
  5 < 5  // false
 '8' < 4 // false

Ex: function testLessThan(val) {
  
    if (val < 25) {  
    return "Under 25";
  }
  
    if (val < 55) {  
    return "Under 55";
  }

  return "55 or Over";
}

*The less than or equal to operator (<=) compares the values of two numbers.
 If the number to the left is less than or equal the number to the right,
 it returns true. If the number on the left is greater than the number on the right,
 it returns false.

Like the equality operator, less than or equal to converts data types.

  4 <= 5  // true
 '7' <= 7 // true
  5 <= 5  // true
  3 <= 2  // false
 '8' <= 4 // false

Ex: function testLessOrEqual(val) {
 
    if (val <= 12) {  
    return "Smaller Than or Equal to 12";
  }
  
    if (val <= 24) { 
    return "Smaller Than or Equal to 24";
  }

  return "25 or More";
}

*Sometimes you will need to test more than one thing at a time.
 The logical and operator (&&) returns true 
if and only if the operands to the left and right of it are true.

The same effect could be achieved by nesting an if statement inside another if:

if (num > 5) {
  if (num < 10) {
    return "Yes";
  }
}
return "No";

will only return "Yes" if num is between 6 and 9 (6 and 9 included). 
The same logic can be written as:

if (num > 5 && num < 10) {
  return "Yes";
}
return "No";

Ex: function testLogicalAnd(val) {
  
    if (val <= 50 && val >= 25) {
    
      return "Yes";
   
   }
     return "No";
}

*The logical or operator (||) returns true if either of the operands is true.
 Otherwise, it returns false.

The pattern below should look familiar from prior waypoints:

if (num > 10) {
  return "No";
}
if (num < 5) {
  return "No";
}
return "Yes";

will return "Yes" only if num is between 5 and 10 (5 and 10 included).
 The same logic can be written as:

if (num > 10 || num < 5) {
  return "No";
}
return "Yes";

Ex: function testLogicalOr(val) {

  if (val<10 || val>20) {
    return "Outside";
  }

  return "Inside";
}
_____________________________________________________________________

21)--(ELSE & SWITCH) STATMENTS--

*When a condition for an if statement is true, the block of code following it is executed.
 What about when that condition is false? Normally nothing would happen.
 With an else statement, an alternate block of code can be executed.

Ex: if (num > 10) {
    return "Bigger than 10";
}   else {
    return "10 or Less";
}

Ex: function testElse(val) {
    var result = "";
  
    if (val > 5) {
     result = "Bigger than 5";
  }
  
    else {
     result = "5 or Smaller";
  }
  
   return result;
}

*If you have multiple conditions that need to be addressed,
 you can chain (if statements) together with (else if statements).

Ex: if (num > 15) {
    return "Bigger than 15";
}   else if (num < 5) {
    return "Smaller than 5";
}   else {
    return "Between 5 and 15";
}

Ex: function testElseIf(val) {
    if (val > 10) {
     return "Greater than 10";
  }
  
    else if (val < 5) {
     return "Smaller than 5";
  }
    else {
     return "Between 5 and 10";
}
  }

*ORDER is important in (if, else if statements);

The loop is executed from top to bottom so you will want to be careful of what statement comes first.

Take these two functions as an example.

Ex: Here's the first:

function a(x) {
  if (x < 1) {
    return "Less than one";
  } else if (x < 2) {
    return "Less than two";
  } else {
    return "Greater than or equal to two";
  }
}
And the second just switches the order of the statements:

function b(x) {
  if (x < 2) {
    return "Less than two";
  } else if (x < 1) {
    return "Less than one";
  } else {
    return "Greater than or equal to two";
  }
}

While these two functions look nearly identical if we pass a number to both we get different outputs.

    a(0) // "Less than one"
    b(0) // "Less than two"


*if/else statements can be chained together for complex logic.
 Here is pseudocode of multiple chained if / else if statements:

Ex: 
 if (condition1) {
     statement1
   }
 else if (condition2) {
     statement2
   }
 else if (condition3) {
     statement3
    . . .
   }
 else {
     statementN
}
_________________________________________

*Statements with SWITCH: it is used if we have many options to choose from,
 and this SWITCH statememt tests a value and can have many (case) statements which
 defines various possible values.
 Statements are executed from the first matched (case) value until a (break) is encountered.

Here is a pseudocode example:

switch (num) {
  case value1:
    statement1;
    break;
  case value2:
    statement2;
    break;
...
  case valueN:
    statementN;
    break;
}

NOTE: case values are tested with strict equality (===).
      The break tells JavaScript to stop executing statements.
      If the break is omitted, the next statement will be executed.

*Adding a default option in Switch statements: 
 In a switch statement you may not be able to specify all possible values as case statements.
 Instead, you can add the default statement which will be executed 
 if no matching case statements are found. 
 Think of it like the final else statement in an if/else chain.

A default statement should be the last case.

Ex:
switch (num) {
  case value1:
    statement1;
    break;
  case value2:
    statement2;
    break;
...
  default:
    defaultStatement;
}
 Ex2:

 function switchOfStuff(val) {
  var answer = "";
 
  switch(val) {
    case 'a' :
     answer= "apple";
      break;
    case 'b' :
      answer="bird"; 
      break;
    case 'c':
      answer="cat";
      break;
    default:
      answer="stuff";
  }
   
  return answer;  
}

*If the break statement is omitted from a switch statement's case,
 the following case statement(s) are executed until a break is encountered.
 If you have multiple inputs with the same output,
 you can represent them in a switch statement like this:

Ex:
 
switch(val) {
  case 1:
  case 2:
  case 3:
    result = "1, 2, or 3";
    break;
  case 4:
    result = "4 alone";
}
Cases for 1, 2, and 3 will all produce the same result.

*Replacing If Else Chains with Switch:
 If you have many options to choose from,
 a switch statement can be easier to write than many chained if/else if statements.
 The following:

Ex1: 

if (val === 1) {
  answer = "a";
} else if (val === 2) {
  answer = "b";
} else {
  answer = "c";
}
can be replaced with:

Ex2:

switch (val) {
  case 1:
    answer = "a";
    break;
  case 2:
    answer = "b";
    break;
  default:
    answer = "c";
}

*Returning Boolean Values from Functions:
 We may recall the comparison operators to return a boolean with (true or false) value.

A common anti-pattern is to use an if/else statement to do a comparison and then return true/false:

function isEqual(a,b) {
  if (a === b) {
    return true;
  } else {
    return false;
  }
}

Since === returns true or false, we can return the result of the comparison:

function isEqual(a,b) {
  return a === b;
}

Ex:
   function isLess(a, b) {
 
   if (a < b) {
    return true;
  } 
   else {
    return false;
  }
}

It could be replaced with :

Ex:

   function isLess(a, b) {
  
     return (a < b);
}

*Return Early Pattern for Functions:
 When a return statement is reached, the execution of the current function stops
 and control returns to the calling location.

Ex:

function myFun() {
  console.log("Hello");
  return "World";
  console.log("byebye")
}
myFun();

NOTE: The above outputs "Hello" to the console, returns "World",
      but "byebye" is never output, because the function exits at the return statement.
______________________________________________________

22)--JAVASCRIPT OBJECTS--


*OBJECTS: are similar to arrays, except that instead of using indexes to access and modify their data,
 you access the data in objects through what are called properties.

Here's a sample object:

var cat = {
  "name": "Whiskers",_____
                          \
  "legs": 4,_______________>>>> NOTE:THERE'S A COMMA AFTER EACH PROPERTY
  "tails": 1,_____________/                      EXCEPT THE LAST ONE.
  "enemies": ["Water", "Dogs"]
};

-Objects are useful for storing data in a structured way,
 and can represent real world objects, like a cat.

*There are two ways to access the properties of an object:
 the dot operator (.) and bracket notation ([]), similar to an array.

-The dot operator is what you use when you know the name of the property you're trying to access ahead of time.

-Here is a sample of using the dot operator (.) to read an object property:

var myObj = {
  prop1: "val1",
  prop2: "val2"
};
var prop1val = myObj.prop1; // val1
var prop2val = myObj.prop2; // val2

-The second way to access the properties of an object is bracket notation ([]).
 If the property of the object you are trying to access has a space in it,
 you will need to use bracket notation.

-Here is a sample of using bracket notation to read an object property:

var myObj = {
  "Space Name": "Kirk",
  "More Space": "Spock"
};
myObj["Space Name"]; // Kirk
myObj['More Space']; // Spock

NOTE: that property names with spaces in them must be in quotes (single or double).


*Another use of bracket notation on objects is to use a variable to access a property.
 This can be very useful for iterating through lists of the object properties or for doing the lookup.

-Here is an example of using a variable to access a property:

var someProp = "propName";
var myObj = {
  propName: "Some Value"
}
myObj[someProp]; // "Some Value"


-Here is one more:

var myDog = "Hunter";
var dogs = {
  Fido: "Mutt",
  Hunter: "Doberman",
  Snoopie: "Beagle"
}
var breed = dogs[myDog];
console.log(breed);// "Doberman"


*After you've created a JavaScript object, 
 you can update its properties at any time just like you would update any other variable.
 You can use either dot or bracket notation to update.

-For example, let's look at ourDog:

var ourDog = {
  "name": "Camper",
  "legs": 4,
  "tails": 1,
  "friends": ["everything!"]
};

-Since he's a particularly happy dog, 
 let's change his name to "Happy Camper". Here's how we update his object's name property:

ourDog.name = "Happy Camper"; or

ourDog["name"] = "Happy Camper";

-Now when we evaluate ourDog.name, instead of getting "Camper",
 we'll get his new name, "Happy Camper".


*You can add new properties to existing JavaScript objects the same way you would modify them.

-Here's how we would add a "bark" property to ourDog in the example below:

Ex: var ourDog = {
    "name": "Camper",
    "legs": 4,
    "tails": 1,
    "friends": ["everything!"]
};

ourDog.bark = "bow-wow";

or

ourDog["bark"] = "bow-wow";

Now when we evaluate ourDog.bark, we'll get his bark, "bow-wow".


*We can also delete properties from objects like this:

Ex: delete ourDog.bark;


*Sometimes it is useful to check if the property of a given object exists or not.
 We can use the .hasOwnProperty(propname) method of objects to determine if that object 
 has the given property name. .hasOwnProperty() returns true or false if the property is found or not.

Example:

var myObj = {
  top: "hat",
  bottom: "pants"
};
myObj.hasOwnProperty("top");    // true
myObj.hasOwnProperty("middle"); // false

Ex2: var myObj = {
        gift: "pony",
        pet: "kitten",
        bed: "sleigh"
};

    function checkObj(checkProp) {
  
       if (myObj.hasOwnProperty(checkProp)) {
           return myObj[checkProp];
}      else {
           return "Not Found";
}

}


*Manipulating Complex Objects:
 Sometimes you may want to store data in a flexible Data Structure.
 A JavaScript object is one way to handle flexible data. They allow for 
 arbitrary combinations of strings, numbers, booleans, arrays, functions, and objects.

Here's an example of a complex data structure:

var ourMusic = [
  {
    "artist": "Daft Punk",
    "title": "Homework",
    "release_year": 1997,
    "formats": [ 
      "CD", 
      "Cassette", 
      "LP" ],
    "gold": true
  }
];

-This is an array which contains one object inside.
 The object has various pieces of "metadata" about an album. 
 It also has a nested "formats" array. If you want to add more album records,
 you can do this by adding records to the top level array.

-Objects hold data in a property, which has a key-value format. 
 In the example above, "artist": "Daft Punk" is a property that has
 a key of "artist" and a value of "Daft Punk".

*/ JavaScript Object Notation or JSON / :
 is a related data interchange format used to store data.

{
  "artist": "Daft Punk",
  "title": "Homework",
  "release_year": 1997,
  "formats": [ 
    "CD",
    "Cassette",
    "LP"
  ],
  "gold": true
}

NOTE:
     You will need to place a comma after every object in the array,
     unless it is the last object in the array.

Ex:
   var myMusic = [
  {
    "artist": "Billy Joel",
    "title": "Piano Man",
    "release_year": 1973,
    "formats": [ 
      "CS", 
      "8T", 
      "LP" ],
    "gold": true,
  },
  {
    "artist": "yanni",
    "title": "music",
    "release_year": 1992,
    "formats":[
     "cd",
     "cassette",
     "lp"
     ],
   
  } 
];


*Accessing Nested Objects:
 The sub-properties of objects can be accessed by 
 chaining together the dot or bracket notation.

-Here is a nested object:

var ourStorage = {
  "desk": {
    "drawer": "stapler"
  },
  "cabinet": {
    "top drawer": { 
      "folder1": "a file",
      "folder2": "secrets"
    },
    "bottom drawer": "soda"
  }
};
ourStorage.cabinet["top drawer"].folder2;  // "secrets"
ourStorage.desk.drawer; // "stapler"


*As we have seen in earlier examples, 
 objects can contain both nested objects and nested arrays.
 Similar to accessing nested objects, Array bracket notation can be chained to access nested arrays.

-Here is an example of how to access a nested array:

var ourPets = [
  {
    animalType: "cat",
    names: [
      "Meowzer",
      "Fluffy",
      "Kit-Cat"
    ]
  },
  {
    animalType: "dog",
    names: [
      "Spot",
      "Bowser",
      "Frankie"
    ]
  }
];
ourPets[0].names[1]; // "Fluffy"
ourPets[1].names[0]; // "Spot"

_______________________________________________________

23)--LOOPS--

*Iterate with JavaScript (For-Loops):
-You can run the same code multiple times by using a loop.
 The most common type of JavaScript loop is called a "for loop" because it runs "for" a specific number of times.
 For loops are declared with three optional expressions separated by semicolons:

-for ([initialization]; [condition]; [final-expression])

-The initialization statement is executed one time only before the loop starts.
 It is typically used to define and setup your loop variable.

-The condition statement is evaluated at the beginning of every loop iteration
 and will continue as long as it evaluates to true. When condition is false at the start of the iteration,
 the loop will stop executing. This means if condition starts as false, your loop will never execute.

-The final-expression is executed at the end of each loop iteration,
 prior to the next condition check and is usually used to increment or decrement your loop counter.

-In the following example we initialize with i = 0 and iterate while our condition i < 5 is true.
 We'll increment i by 1 in each loop iteration with i++ as our final-expression.
Ex:
var ourArray = [];
for (var i = 0; i < 5; i++) {
  ourArray.push(i);
}
ourArray will now contain [0,1,2,3,4].

Ex2:
var myArray = [];
for(var i = 1; i <= 5; i++) {
  myArray.push(i);
}
myArray will now contain [1,2,3,4,5].


*Iterate Odd Numbers With a (For Loop):
 For loops don't have to iterate one at a time.
 By changing our final-expression, we can count by even numbers.

-We'll start at i = 0 and loop while i < 10. We'll increment i by 2 each loop with i += 2.

var ourArray = [];
for (var i = 0; i < 10; i += 2) {
  ourArray.push(i);
}
ourArray will now contain [0,2,4,6,8].

Let's change our initialization so we can count by odd numbers.

Ex2:
var myArray = [];

for (var i = 1 ; i <= 9; i += 2 ){
  myArray.push(i);
}
myArray will contain [1,3,5,7,9]


*Count Backwards With a (For Loop):
 A for loop can also count backwards,
 so long as we can define the right conditions.

-In order to count backwards by twos, we'll need to change our 
 initialization, condition, and final-expression.

We'll start at i = 10 and loop while i > 0. We'll decrement i by 2 each loop with i -= 2.

var ourArray = [];
for (var i=10; i > 0; i-=2) {
  ourArray.push(i);
}
ourArray will now contain [10,8,6,4,2].

-Let's change our initialization and final-expression
 so we can count backward by twos by odd numbers.

Ex2:
var myArray = [];

for(var i = 9 ; i > 0 ; i -= 2){
  myArray.push(i);
}
myArray will now contain [9,7,5,3,1].


*A common task in JavaScript is to iterate through the contents of an array.
 One way to do that is with a for loop.

- This code will output each element of the array arr to the console:

var arr = [10,9,8,7,6];
for (var i=0; i < arr.length; i++) {
   console.log(arr[i]);
}
-Remember that Arrays have zero-based numbering,
 which means the last index of the array is length - 1.
 Our condition for this loop is i < arr.length, which stops when i is at length - 1.

Ex:
   var myArr = [ 2, 3, 4, 5, 6];

   var total=0;

  for (i=0 ; i<myArr.length; i+=1) {

   total += (myArr[i]);
}
the value of total will equal 20.

*Nesting For Loops
 If you have a multi-dimensional array,
 you can use the same logic as the prior waypoint to loop through
 both the array and any sub-arrays. Here is an example:

var arr = [
  [1,2], [3,4], [5,6]
];
 for (var i=0; i < arr.length; i++) {
  for (var j=0; j < arr[i].length; j++) {
    console.log(arr[i][j]);
  }
}
-This outputs each sub-element in arr one at a time.
 Note that for the inner loop, we are checking the
 .length of arr[i], since arr[i] is itself an array.

Ex: 
function multiplyAll(arr) {
  var product = 1;
  
  for (var i=0;  i < arr.length; i++) {

   for (var j=0; j < arr[i].length; j++) {

    console.log(product *= arr[i][j]);
  }
 }
  
  return product;
}
multiplyAll([[1],[2],[3]]); should return 6
multiplyAll([[1,2],[3,4],[5,6,7]]) should return 5040


*Iterate with JavaScript (While Loops):

You can run the same code multiple times by using a loop.
Another type of JavaScript loop is called a "while loop",
because it runs "while" a specified condition is true and stops once that condition is no longer true.

var ourArray = [];
var i = 0;
while(i < 5) {
  ourArray.push(i);
  i++;
}
Let's try getting a while loop to work by pushing values to an array.

Ex: var myArray = [];

    var i = 0 ;
     while(i< 5) {
      myArray.push(i);
       i ++;
}
the output will be [0,1,2,3,4].


*
JavaScript has a Math.random() function that generates a random decimal number.

Random numbers are useful for creating random behavior.

-JavaScript has a Math.random() function that generates a random decimal number
 between 0 (inclusive) and not quite up to 1 (exclusive).
 Thus Math.random() can return a 0 but never quite return a 1

NOTE:
    Like Storing Values with the Equal Operator, 
    all function calls will be resolved before the return executes,
    so we can return the value of the Math.random() function.

Ex:

   function randomFraction() {

    return Math.random();
   
}


*Generate Random Whole Numbers with JavaScript:
 It's great that we can generate random decimal numbers,
 but it's even more useful if we use it to generate random whole numbers.

1-Use Math.random() to generate a random decimal.
2-Multiply that random decimal by 20.
3-Use another function, Math.floor() to round the number down to its nearest whole number.

-Remember that Math.random() can never quite return a 1 and,
 because we're rounding down, it's impossible to actually get 20.
 This technique will give us a whole number between 0 and 19.

-Putting everything together, this is what our code looks like:

 Math.floor(Math.random() * 20);

-We are calling Math.random(), multiplying the result by 20,
 then passing the value to Math.floor() function to round the value down to the nearest whole number.

Ex: 
   var randomNumberBetween0and19 = Math.floor(Math.random() * 20);

     function randomWholeNum() {


       return Math.floor(Math.random() * 10);

} // the output ==> 8.


*Generate Random Whole Numbers within a Range:
 Instead of generating a random number between zero and a given number like we did before,
 we can generate a random number that falls within a range of two specific numbers.

-To do this, we'll define a minimum number min and a maximum number max.

-Here's the formula we'll use. Take a moment to read it and try to understand what this code is doing:

   Math.floor(Math.random() * (max - min + 1)) + min

Ex:
    function randomRange(myMin, myMax) {

      return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin; 
}

  to test your function:
var myRandom = randomRange(5, 15); // outputs: randomRange = 11.


*Sift through Text with Regular Expressions:

 Regular expressions are used to find certain words or patterns inside of strings.

-For example, if we wanted to find the word the in the string The dog chased the cat,
 we could use the following regular expression: /the/gi

-Let's break this down a bit:

1- (/) is the start of the regular expression.

2- (the) is the pattern we want to match.

3- (/) is the end of the regular expression.

4- (g) means global, which causes the pattern to return all matches in the string, not just the first one.

5- (i) means that we want to ignore the case (uppercase or lowercase) when searching for the pattern.

Ex:

var testString = "Ada Lovelace and Charles Babbage designed the first computer
                  and the software that would have run on it.";

// To select all the occurrences of the word (software) in testString :

var expressionToGetSoftware = /software/gi;
var softwareCount = testString.match(expressionToGetSoftware).length;
// outputs: 1
  
// To select all the occurrences of the word (and) in testString :

var expression = /and/gi;  // Change this Line
var expressionToGetAnd = testString.match(expression).length;
// outputs: 2

*Find Numbers with (Regular Expressions):

 We can use special selectors in Regular Expressions to select a particular type of value.

-One such selector is the digit selector \d which is used to retrieve one digit (e.g. numbers 0 to 9) in a string.

-In JavaScript, it is used like this: /\d/g.

-Appending a plus sign (+) after the selector, 
 e.g. /\d+/g, allows this regular expression to match one or more digits.

-The trailing g is short for 'global',
 which allows this regular expression to find all matches rather than stop at the first match.

Ex: 
    var testString = "There are 3 cats but 4 dogs.";

     var expression = /\d+/g;


*Find Whitespace with (Regular Expressions):

 We can also use regular expression selectors like \s to find whitespace in a string.

-The whitespace characters are " " (space), \r (the carriage return), \n (newline), \t (tab), and \f (the form feed).

-The whitespace regular expression looks like this:

    /\s+/g

Ex:
    var testString = "How many spaces are there in this sentence?";

      var expression = /\s+/g; 


*Invert Regular Expression Matches with JavaScript:

 You can invert any match by using the uppercase version of the regular expression selector.

For example: \s will match any whitespace,
             and \S will match anything that isn't whitespace.

Ex:
    var testString = "How many non-space characters are there in this sentence?";

      var expression = /\S/g;
____________________________________________________________________________________________________________

